// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract MyToken is ERC20 {
    address public ownerAddress;

    event TokensTransferred(address indexed sender, address indexed receiver, uint256 amount);

    modifier onlyOwner() {
        require(msg.sender == ownerAddress, "Only the token owner can perform this action");
        _;
    }

    constructor(uint256 initialSupply) ERC20("My Token", "MTK") {
        ownerAddress = msg.sender;
        _mint(ownerAddress, initialSupply);
    }

    function mintTokens(address beneficiary, uint256 amount) external onlyOwner {
        _mint(beneficiary, amount);
        emit TokensTransferred(address(0), beneficiary, amount);
    }

    function burnTokens(uint256 amount) external {
        require(balanceOf(msg.sender) >= amount, "Insufficient tokens balance to burn");
        _burn(msg.sender, amount);
        emit TokensTransferred(msg.sender, address(0), amount);
    }

    function transferTokens(address receiver, uint256 amount) external returns (bool) {
        _transfer(msg.sender, receiver, amount);
        emit TokensTransferred(msg.sender, receiver, amount);
        return true;
    }
}
